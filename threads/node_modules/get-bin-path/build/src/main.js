import{readFileSync}from"node:fs";
import{readFile}from"node:fs/promises";
import{dirname}from"node:path";

import escalade from"escalade";

import escaladeSync from"escalade/sync";

import{getBinField}from"./bin.js";
import{getDirField,getDirFieldSync}from"./directories.js";













export const getBinPath=async(opts)=>{
const{name,cwd}=normalizeOpts(opts);
const packageJsonPath=await escalade(cwd,findPackageJson);

if(packageJsonPath===undefined){
return
}

const packageJsonContents=await readFile(packageJsonPath);
const packageJsonFields=parsePackageJson(
packageJsonPath,
packageJsonContents,
name
);
const binField=getBinField(packageJsonFields);
return binField===undefined?
await getDirField(packageJsonFields):
binField
};












export const getBinPathSync=(opts)=>{
const{name,cwd}=normalizeOpts(opts);
const packageJsonPath=escaladeSync(cwd,findPackageJson);

if(packageJsonPath===undefined){
return
}

const packageJsonContents=readFileSync(packageJsonPath);
const packageJsonFields=parsePackageJson(
packageJsonPath,
packageJsonContents,
name
);
const binField=getBinField(packageJsonFields);
return binField===undefined?getDirFieldSync(packageJsonFields):binField
};

const normalizeOpts=({name,cwd="."}={})=>({name,cwd});

const findPackageJson=(_,filenames)=>filenames.find(isPackageJson);

const isPackageJson=(filename)=>filename==="package.json";

const parsePackageJson=(packageJsonPath,packageJsonContents,name)=>{
const{
name:packageName,
bin:packageBin,
directories
}=JSON.parse(packageJsonContents);
const rootDir=dirname(packageJsonPath);
return{packageBin,directories,rootDir,name,packageName}
};